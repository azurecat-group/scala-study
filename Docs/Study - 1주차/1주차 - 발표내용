스칼라의 역사
스칼라는 ?
확장 가능 언어라는 뜻

스칼라의 설계
사용자의 요구에 따라 자랄 수 있는 언어로 설계함.

스칼라의 활용 범위
작은 스크립트 부터 커다란 시스템 구축하는 일 까지 광범위한 프로그래밍 과업에 스칼라를 사용 가능하다.

스칼라의 장점
표준 자바 플랫폼에서 실행할 수 있고, 모든 자바 라이브러리와 매끈하게 연동할수 있다.
가독성이 좋으면서 간결한 프로그래밍 스타일로 이끈다.
유연성이 뛰어나다.

스칼라의 프로그래밍 패러다임
객체지향 과 함수형 프로그래밍 개념을 정적 타입 언어에 합쳐놓은 언어다.
- 객체지향 프로그래밍  특징 : 캡슐화, 상속성, 다형성 등등.. 
- 함수형 프로그래밍 특징 :  람다 칼큘러스에 기반하고 있는 언어
- 정적 타입 언어 특징 : 자료형이 고정되어 있음.

스칼라와 타 언어의 다른점
예제가 약간 다르긴 하나 어떤식으로 다른가를 설명하기 위해 자바 HashMap과 스칼라 기본 Map 구현을 비교함.

스칼라
Var capital = Map("US" -> "Washington", "France" -> "Paris" )
Capital += ( "Japan" -> "Tokyo")
println(capital("France"))


자바
HashMap<String, String> map = new HashMap<String, String>();
map.put("US", "Washington");
map.put("France", "Paris");
map.put("Japan", "Tokyo");
System.out.println(map.get("France"));

스크립트 언어와 비슷하며, 프로그램을 간결하고 읽기 쉽게 유지하는데 도움.


